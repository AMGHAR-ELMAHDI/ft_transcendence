version: "3"

services:
  # back-end:
  #   build: ./Django
  #   ports:
  #     - "2500:2500"
  #   container_name: backEnd
  #   volumes:
  #     - ./Django:/code
  #   depends_on:
  #     - db
  # logging:
  #   driver: gelf
  #   options:
  #     gelf-address: "udp://localhost:12201"
  #     tag: "back-end"
  #   networks:
  #     - ft_trans

  db:
    container_name: database
    image: postgres
    restart: always
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "db"

    env_file:
      - .env
    networks:
      - ft_trans

  # adminer:
  #   container_name: adminer
  #   image: adminer
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - ft_trans

  # frontend:
  #   build:
  #     context: ./React
  #     dockerfile: Dockerfile
  #   image: frontend
  #   container_name: frontend
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./React:/app
  #   depends_on:
  #     - back-end
  #   networks:
  #     - ft_trans
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://localhost:12201"
  #       tag: "frontend"
  #   restart: unless-stopped
  # -----------------------------DEVOPS--------------------------------

  # -----------------------------ELK--------------------------------
  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.0"
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
      - ELASTIC_USERNAME=elastic
    volumes:
      - esdata:/usr/share/elasticsearch/data
    env_file:
      - .env
    networks:
      - ft_trans
    restart: on-failure

  kibana:
    image: "docker.elastic.co/kibana/kibana:7.17.0"
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
      - "ELASTICSEARCH_USERNAME=elastic"
      - "ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}"
    depends_on:
      - elasticsearch
    env_file:
      - .env
    networks:
      - ft_trans
    restart: on-failure

  logstash:
    image: "docker.elastic.co/logstash/logstash:7.17.0"
    container_name: logstash
    volumes:
      - ./DevOps/ELK/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./DevOps/ELK/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    ports:
      - "12201:12201/udp"
      - "12201:12201/tcp"
    env_file:
      - .env
    depends_on:
      - elasticsearch
    # environment:
    #   - LOGSTASH_INTERNAL_PASSWORD=${ELASTIC_PASSWORD}
    #   - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - ft_trans
    restart: on-failure

  filebeat:
    image: "docker.elastic.co/beats/filebeat:7.17.0"
    container_name: filebeat
    user: root
    env_file:
      - .env
    volumes:
      - ./DevOps/ELK/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash
    networks:
      - ft_trans
    command: --strict.perms=false
    restart: on-failure

  # -----------------------------PROMETHEUS GRAFANA--------------------------------
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    env_file:
      - .env
    ports:
      - 9100:9100
    networks:
      - ft_trans
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    networks:
      - ft_trans
    env_file:
      - .env
    volumes:
      - prometheus-data:/prometheus
      - ./DevOps/Prometheus-Grafana/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./DevOps/Prometheus-Grafana/rules.yml:/etc/alertmanager/rules.yml
    depends_on:
      - node-exporter
      - alertmanager
      - cadvisor
    command:
      - "--web.enable-lifecycle"
      - --config.file=/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - ft_trans
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ./DevOps/Prometheus-Grafana/provisioning:/etc/grafana/provisioning/
      - ./DevOps/Prometheus-Grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=$ADMIN_PASS"
    depends_on:
      - prometheus
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - 9093:9093
    networks:
      - ft_trans
    env_file:
      - .env
    volumes:
      - alertmanager-data:/data
      - ./DevOps/Prometheus-Grafana/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command: --config.file=/etc/alertmanager/alertmanager.yml
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8081:8080
    env_file:
      - .env
    networks:
      - ft_trans
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped

networks:
  ft_trans:
    driver: bridge

volumes:
  data:
  esdata:
  prometheus-data: {}
  alertmanager-data: {}
  grafana-data: {}
