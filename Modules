Major module: Use a Framework as backend. ['Django']
=======================================================================================
Minor module: ['PostgreSQL']
=======================================================================================
Major module: Implementing a remote authentication. ['42-Auth'] : Not complete
=======================================================================================
Major module: Standard user management, authentication, users across tournaments.
◦ Users can subscribe to the website in a secure way. ['Done']
['http://localhost:2500/sign-up/']
◦ Registered users can log in in a secure way. ['Done']
['http://localhost:2500/sign-in/']
◦ Users can select a unique display name to play the tournaments. ['Done']
◦ Users can update their information. ['Done']
['http://localhost:2500/player/setting/']
◦ Users can upload an avatar, with a default option if none is provided. ['Done']
['http://localhost:2500/player/setting/']
◦ Users can add others as friends and view their online status. ['Done']
['http://localhost:2500/player/{username}/me/',
'ws/status/<str:token>/<int:type>', {"1" : ONLINE, "2" : IN_GAME}
]
working on the online status
◦ User profiles display stats, such as wins and losses. ['Done']
[
'http://localhost:2500/player/me/',
'http://localhost:2500/player/achievements/',
'http://localhost:2500/player/games/',
'http://localhost:2500/player/items/',
]
◦ Each user has a Match History including 1v1 games, dates, and relevant details, accessible to logged-in users. ['Done']
['http://localhost:2500/player/games/',]
=======================================================================================
Major module: Implement Two-Factor Authentication (2FA) and JWT.
◦ Implement Two-Factor Authentication (2FA) as an additional layer of security 
for user accounts, requiring users to provide a secondary verification method,
such as a one-time code, in addition to their password. ['Done']
◦ Utilize JSON Web Tokens (JWT) as a secure method for authentication and
authorization, ensuring that user sessions and access to resources are managed
securely. ['Done']
◦ Provide a user-friendly setup process for enabling 2FA, with options for SMS
codes, authenticator apps, or email-based verification. ['Not yet']
◦ Ensure that JWT tokens are issued and validated securely to prevent unauthorized access to user accounts and sensitive data. ['Done']
=======================================================================================
Major module: Live Chat.
◦ The user should be able to send direct messages to other users. ['Done']
◦ The user should be able to block other users. This way, they will see no more messages from the account they blocked. ['Done']
◦ The user should be able to invite other users to play a Pong game through the chat interface. ['Done']
◦ The tournament system should be able to warn users expected for the next game. ['Not yet']
◦ The user should be able to access other players profiles through the chat interface. ['Done']
=======================================================================================
Minor module: User and Game Stats Dashboards.
In this minor module, the goal is to introduce dashboards that display statistics for
individual users and game sessions. Key features and objectives include:
◦ Create user-friendly dashboards that provide users with insights into their own gaming statistics. ['Done']
◦ Develop a separate dashboard for game sessions, showing detailed statistics, outcomes, and historical data for each match. ['Not yet']
◦ Ensure that the dashboards offer an intuitive and informative user interface for tracking and analyzing data. ['Not yet']
◦ Implement data visualization techniques, such as charts and graphs, to present statistics in a clear and visually appealing manner. ['Not yet']
◦ Allow users to access and explore their own gaming history and performance metrics conveniently. ['Done']
◦ Feel free to add any metrics you deem useful.



=======================================================================================
Not yet :
There must be a matchmaking system: the tournament system organize the matchmaking of the participants, and announce the next fight?
Your website must be protected against SQL injections/XSS. ['Needs to be verified']
If you have a backend or any other features, it is mandatory to enable an HTTPS connection for all aspects (Utilize wss instead of ws...).
You must implement some form of validation for forms and any user input, either within the base page if no backend is used or on the server side if a backend is employed. ['Needs to be verified']